{
  "$id": "https://raw.githubusercontent.com/robcowart/codex/master/schemas/json/http.json#",
  "$schema": "http://json-schema.org/schema#",
  "type": "object",
  "title": "HTTP",
  "description": "HTTP request and response messages.",
  "required": [
    "url"
  ],
  "properties": {
    "version": {
      "type": "string",
      "maxLength": 16,
      "examples": [
        "1.1"
      ],
      "title": "version",
      "description": "HTTP request and response messages include an HTTP protocol version using a <major>.<minor> numbering scheme."
    },
    "url": {
      "$ref": "https://raw.githubusercontent.com/robcowart/codex/master/schemas/json/uri.json#",
      "title": "URL",
      "description": "The complete Uniform Resource Identifiers (URIs). A URI-reference is either a URI or a relative reference."
    },
    "redir": {
      "$ref": "https://raw.githubusercontent.com/robcowart/codex/master/schemas/json/uri.json#",
      "title": "redirect URL",
      "description": "This IE contains the URL to which to which the client is redirected by the server."
    },
    "resp_time": {
      "type": "integer",
      "examples": [
        40
      ],
      "title": "response time",
      "description": "The time elapsed between the observation of an HTTP request from a client and the corresponding HTTP response from the server."
    },
    "rtt": {
      "type": "integer",
      "examples": [
        55
      ],
      "title": "round-trip time",
      "description": "The total round-trip time between when an HTTP request was sent from a client and the corresponding HTTP response was received from the server."
    },
    "headers": {
      "type": "integer",
      "examples": [
        8
      ],
      "title": "headers",
      "description": "A count of headers in the HTTP request or response message."
    },
    "gen": {
      "type": "object",
      "title": "general headers",
      "description": "A general header is an HTTP header that can be used in both request and response messages but doesn't apply to the content itself. Depending on the context they are used in, general headers are either response or request headers. However, they are not entity headers.",
      "properties": {
        "cache_control": {
          "type": "string",
          "examples": [
            "max-age=<seconds>",
            "no-cache"
          ],
          "title": "Cache-Control",
          "description": "The Cache-Control HTTP header holds directives (instructions) for caching in both requests and responses. A given directive in a request does not mean the same directive should be in the response."
        },
        "connection": {
          "type": "string",
          "examples": [
            "keep-alive",
            "close"
          ],
          "title": "Connection",
          "description": "The Connection general header controls whether or not the network connection stays open after the current transaction finishes. If the value sent is keep-alive, the connection is persistent and not closed, allowing for subsequent requests to the same server to be done."
        },
        "date": {
          "type": "string",
          "examples": [
            "Wed, 21 Oct 2015 07:28:00 GMT"
          ],
          "title": "Date",
          "description": "The Date general HTTP header contains the date and time at which the message was originated."
        },
        "keep_alive": {
          "type": "string",
          "examples": [
            "timeout=5, max=1000"
          ],
          "title": "Keep-Alive",
          "description": "The Keep-Alive general header allows the sender to hint about how the connection may be used to set a timeout and a maximum amount of requests."
        },
        "pragma": {
          "type": "string",
          "examples": [
            "no-cache"
          ],
          "title": "Pragma",
          "description": "The Pragma HTTP/1.0 general header is an implementation-specific header that may have various effects along the request-response chain. It is used for backwards compatibility with HTTP/1.0 caches where the Cache-Control HTTP/1.1 header is not yet present."
        },
        "upgrade": {
          "type": "string",
          "examples": [
            "websocket"
          ],
          "title": "Upgrade",
          "description": "The Upgrade header field is used by clients to invite the server to switch to one of the listed protocols, in descending preference order. The server, if it supports the protocol, replies with the same Upgrade header value as well as Connection: Upgrade. Once this handshake is completed successfully, data transfer begins."
        },
        "via": {
          "type": "string",
          "examples": [
            "HTTP/1.1 GWA"
          ],
          "title": "Via",
          "description": "The Via general header is added by proxies, both forward and reverse proxies, and can appear in the request headers and the response headers. It is used for tracking message forwards, avoiding request loops, and identifying the protocol capabilities of senders along the request/response chain."
        },
        "want_digest": {
          "type": "string",
          "examples": [
            "SHA-512;q=0.3, sha-256;q=1, md5;q=0"
          ],
          "title": "Want-Digest",
          "description": "The Want-Digest HTTP header is primarily used in a HTTP request, to ask the responder to provide a digest of the requested resource using the Digest response header."
        },
        "warning": {
          "type": "string",
          "examples": [
            "110 anderson/1.3.37 \"Response is stale\""
          ],
          "title": "Warning",
          "description": "The Warning general HTTP header contains information about possible problems with the status of the message. More than one Warning header may appear in a response."
        },
        "x_auth_token": {
          "type": "string",
          "title": "X-Auth-Token",
          "description": "The X-Auth-Token being an unregistered header, it is subject to no formal specification. Its presence and content is always tied to a respective application. A user initially logs in by supplying a username and password. The server returns an access-token in the X-Auth-Token header. For subsequent requests the token is sent by the client in the X-Auth-Token header."
        }
      },
      "additionalProperties": true
    },
    "entity": {
      "type": "object",
      "title": "entity header",
      "description": "An entity header is an HTTP header describing the content of the body of the message. Entity headers are used in both, HTTP requests and responses.",
      "properties": {
        "allow": {
          "type": "string",
          "examples": [
            "GET, POST, HEAD"
          ],
          "title": "Allow",
          "description": "The Allow header lists the set of methods supported by a resource."
        },
        "content_encoding": {
          "type": "string",
          "examples": [
            "deflate, gzip"
          ],
          "title": "Content-Encoding",
          "description": "The Content-Encoding entity header is used to compress the media-type. When present, its value indicates which encodings were applied to the entity-body."
        },
        "content_language": {
          "type": "string",
          "examples": [
            "de-DE, en-CA"
          ],
          "title": "Content-Language",
          "description": "The Content-Language entity header is used to describe the language(s) intended for the audience, so that it allows a user to differentiate according to the users' own preferred language."
        },
        "content_length": {
          "type": "integer",
          "examples": [
            320
          ],
          "title": "Content-Length",
          "description": "The Content-Length entity header indicates the size of the entity-body, in bytes, sent to the recipient."
        },
        "content_location": {
          "type": "string",
          "examples": [
            "/documents/foo.json"
          ],
          "title": "Content-Location",
          "description": "The Content-Location header indicates an alternate location for the returned data. The principal use is to indicate the URL of a resource transmitted as the result of content negotiation."
        },
        "content_md5": {
          "type": "string",
          "title": "Content-MD5",
          "description": "The Content-MD5 entity header is generated by only an originating user agent. Message relays and gateways are expressly forbidden from generating a Content-MD5 field. To generate the value of the Content-MD5 field, the MD5 algorithm is computed on the canonical form of the MIME entity's object."
        },
        "content_type": {
          "type": "string",
          "examples": [
            "text/html; charset=UTF-8"
          ],
          "title": "Content-Type",
          "description": "The Content-Type entity header is used to indicate the media type of the resource."
        },
        "delta_base": {
          "type": "string",
          "title": "Delta-Base",
          "description": "The Delta-Base entity header is used in a delta-encoded response to specify the entity tag of the base instance. "
        },
        "link": {
          "type": "string",
          "examples": [
            "<https://example.com>; rel=\"preconnect\""
          ],
          "title": "Link",
          "description": "The HTTP Link entity-header field provides a means for serialising one or more links in HTTP headers. It is semantically equivalent to the HTML <link> element."
        }
      },
      "additionalProperties": true
    },
    "req": {
      "type": "object",
      "title": "request",
      "description": "Contains request headers and additional attributes related to an HTTP request.",
      "required": [
        "method"
      ],
      "properties": {
        "datetime": {
          "type": "string",
          "examples": [
            "Wed, 21 Oct 2015 07:28:00 GMT"
          ],
          "title": "date and time",
          "description": "The timestamp, expressed as an HTTP-date value, when the HTTP request was observed."
        },
        "timestamp": {
          "type": "integer",
          "examples": [
            1591974346603
          ],
          "title": "timestamp",
          "description": "The timestamp, expressed as milliseconds since epoch, when the HTTP request was observed."
        },
        "method": {
          "type": "string",
          "examples": [
            "GET",
            "PUT",
            "DELETE"
          ],
          "title": "request method",
          "description": "The request method token is the primary source of request semantics; it indicates the purpose for which the client has made this request and what is expected by the client as a successful result."
        },
        "bytes": {
          "type": "integer",
          "examples": [
            123
          ],
          "title": "request size/length",
          "description": "The size/length of the HTTP request."
        },
        "a_im": {
          "type": "string",
          "examples": [
            "vcdiff, gdiff;q=0.3"
          ],
          "title": "A-IM",
          "description": "The A-IM request header is similar to Accept, but restricts the instance-manipulations that are acceptable in the response. A response may be the result of applying multiple instance-manipulations."
        },
        "accept": {
          "type": "string",
          "examples": [
            "text/plain; q=0.5, text/html"
          ],
          "title": "Accept",
          "description": "The Accept request header advertises which content types, expressed as MIME types, the client is able to understand."
        },
        "accept_charset": {
          "type": "string",
          "examples": [
            "iso-8859-5, unicode-1-1;q=0.8"
          ],
          "title": "Accept-Charset",
          "description": "The Accept-Charset request header advertises which character encodings the client understands."
        },
        "accept_datetime": {
          "type": "string",
          "examples": [
            "Thu, 31 May 2007 20:35:00 GMT"
          ],
          "title": "Accept-Datetime",
          "description": "The Accept-Datetime request header is transmitted by a user agent to indicate it wants to access a past state of an Original Resource."
        },
        "accept_encoding": {
          "type": "string",
          "examples": [
            "compress;q=0.5, gzip;q=1.0"
          ],
          "title": "Accept-Encoding",
          "description": "The Accept-Encoding request header advertises which content encoding, usually a compression algorithm, the client is able to understand."
        },
        "accept_language": {
          "type": "string",
          "examples": [
            "da, en-gb;q=0.8, en;q=0.7"
          ],
          "title": "Accept-Language",
          "description": "The Accept-Language request header advertises which languages the client is able to understand, and which locale variant is preferred. (By languages, we mean natural languages, such as English, and not programming languages.)"
        },
        "access_control_request_headers": {
          "type": "string",
          "examples": [
            "X-Custom-Header, Upgrade-Insecure-Requests"
          ],
          "title": "Access-Control-Request-Headers",
          "description": "The Access-Control-Request-Headers request header is used by browsers when issuing a preflight request, to let the server know which HTTP headers the client might send when the actual request is made."
        },
        "access_control_request_method": {
          "type": "string",
          "examples": [
            "POST"
          ],
          "title": "Access-Control-Request-Method",
          "description": "The Access-Control-Request-Method request header is used by browsers when issuing a preflight request, to let the server know which HTTP method will be used when the actual request is made. This header is necessary as the preflight request is always an OPTIONS and doesn't use the same method as the actual request."
        },
        "authorization": {
          "type": "string",
          "examples": [
            "Basic YWxhZGRpbjpvcGVuc2VzYW1l"
          ],
          "title": "Authorization",
          "description": "The HTTP Authorization request header contains the credentials to authenticate a user agent with a server, usually, but not necessarily, after the server has responded with a 401 Unauthorized status and the WWW-Authenticate header."
        },
        "cookie": {
          "type": "string",
          "examples": [
            "PHPSESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;"
          ],
          "title": "Cookie",
          "description": "The Cookie HTTP request header contains stored HTTP cookies previously sent by the server with the Set-Cookie header."
        },
        "cookie2": {
          "type": "string",
          "examples": [
            "$Version=\"1\""
          ],
          "title": "Cookie2",
          "description": "The obsolete Cookie2 HTTP request header used to advise the server that the user agent understands *new-style* cookies, but nowadays user agents will use the Cookie header instead, not this one."
        },
        "device_memory": {
          "type": "integer",
          "examples": [
            8
          ],
          "title": "Device-Memory",
          "description": "The Device-Memory header is a Device Memory API header that works like Client Hints header which represents the approximate amount of RAM client device has."
        },
        "dnt": {
          "type": "integer",
          "examples": [
            0,
            1,
            null
          ],
          "title": "DNT",
          "description": "The DNT (Do Not Track) request header indicates the user's tracking preference. It lets users indicate whether they would prefer privacy rather than personalized content."
        },
        "dpr": {
          "type": "number",
          "examples": [
            "1.0"
          ],
          "title": "DPR",
          "description": "The DPR header is a Client Hints headers which represents the client device pixel ratio (DPR), which is the the number of physical device pixels corresponding to every CSS pixel."
        },
        "early_data": {
          "type": "integer",
          "examples": [
            1
          ],
          "title": "Early-Data",
          "description": "The Early-Data header is set by an intermediary to indicate that the request has been conveyed in TLS early data, and also indicates that the intermediary understands the 425 (Too Early) status code."
        },
        "expect": {
          "type": "string",
          "examples": [
            "100-continue"
          ],
          "title": "Expect",
          "description": "The Expect HTTP request header indicates expectations that need to be fulfilled by the server in order to properly handle the request."
        },
        "forwarded": {
          "type": "string",
          "examples": [
            "for=192.0.2.60;proto=http;by=203.0.113.43"
          ],
          "title": "Forwarded",
          "description": "The Forwarded header contains information from the client-facing side of proxy servers that is altered or lost when a proxy is involved in the path of the request."
        },
        "from": {
          "type": "string",
          "examples": [
            "webmaster@example.org"
          ],
          "title": "From",
          "description": "The From request header contains an Internet email address for a human user who controls the requesting user agent."
        },
        "front_end_https": {
          "type": "string",
          "title": "Front-End-Https",
          "description": "Front-End-Https is a Non-standard header field used by Microsoft applications and load-balancers."
        },
        "host": {
          "type": "string",
          "examples": [
            "www.example.org"
          ],
          "title": "Host",
          "description": "The Host request header specifies the host and port number of the server to which the request is being sent. If no port is included, the default port for the service requested (e.g., 443 for an HTTPS URL, and 80 for an HTTP URL) is implied."
        },
        "http2_settings": {
          "type": "string",
          "examples": [
            "token68"
          ],
          "title": "HTTP2-Settings",
          "description": "The HTTP2-Settings header field is a connection-specific header field that includes parameters that govern the HTTP/2 connection, provided in anticipation of the server accepting the request to upgrade."
        },
        "if_match": {
          "type": "string",
          "examples": [
            "\"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"",
            "\"67ab43\", \"54ed21\", \"7892dd\"",
            "*"
          ],
          "title": "If-Match",
          "description": "The If-Match HTTP request header makes the request conditional. For GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. For PUT and other non-safe methods, it will only upload the resource in this case."
        },
        "if_modified_since": {
          "type": "string",
          "examples": [
            "Sat, 29 Oct 1994 19:43:31 GMT"
          ],
          "title": "If-Modified-Since",
          "description": "The If-Modified-Since request HTTP header makes the request conditional: the server will send back the requested resource, with a 200 status, only if it has been last modified after the given date."
        },
        "if_none_match": {
          "type": "string",
          "examples": [
            "\"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"",
            "W/\"67ab43\", \"54ed21\", \"7892dd\"",
            "*"
          ],
          "title": "If-None-Match",
          "description": "The If-None-Match HTTP request header makes the request conditional. For GET and HEAD methods, the server will send back the requested resource, with a 200 status, only if it doesn't have an ETag matching the given ones. For other methods, the request will be processed only if the eventually existing resource's ETag doesn't match any of the values listed."
        },
        "if_range": {
          "type": "string",
          "examples": [
            "Wed, 21 Oct 2015 07:28:00 GMT"
          ],
          "title": "If-Range",
          "description": "The If-Range HTTP request header makes a range request conditional: if the condition is fulfilled, the range request will be issued and the server sends back a 206 Partial Content answer with the appropriate body. If the condition is not fulfilled, the full resource is sent back, with a 200 OK status."
        },
        "if_unmodified_since": {
          "type": "string",
          "examples": [
            "Wed, 21 Oct 2015 07:28:00 GMT"
          ],
          "title": "If-Unmodified-Since",
          "description": "The If-Unmodified-Since request HTTP header makes the request conditional: the server will send back the requested resource, or accept it in the case of a POST or another non-safe method, only if it has not been last modified after the given date. If the resource has been modified after the given date, the response will be a 412 (Precondition Failed) error."
        },
        "max_forwards": {
          "type": "integer",
          "examples": [
            3
          ],
          "title": "Max-Forwards",
          "description": "The Max-Forwards request-header field provides a mechanism with the TRACE and OPTIONS methods to limit the number of proxies or gateways that can forward the request to the next inbound server. This can be useful when the client is attempting to trace a request chain which appears to be failing or looping in mid-chain."
        },
        "origin": {
          "type": "string",
          "title": "Origin",
          "description": "The Origin request header indicates where a fetch originates from. It doesn't include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn't disclose the whole path."
        },
        "proxy_authorization": {
          "type": "string",
          "examples": [
            "Basic YWxhZGRpbjpvcGVuc2VzYW1l"
          ],
          "title": "Proxy-Authorization",
          "description": "The HTTP Proxy-Authorization request header contains the credentials to authenticate a user agent to a proxy server, usually after the server has responded with a 407 Proxy Authentication Required status and the Proxy-Authenticate header."
        },
        "proxy_connection": {
          "type": "string",
          "title": "Proxy-Connection",
          "description": "The Proxy-Connection element contains a string value that specifies whether the connection is to be kept open after the request has been sent. If the value indicates that the connection can be kept open, the HTTP 1.1 proxy will accept subsequent requests that can be executed against the server URI."
        },
        "range": {
          "type": "string",
          "examples": [
            "bytes=200-1000, 2000-6576, 19000- "
          ],
          "title": "Range",
          "description": "The Range HTTP request header indicates the part of a document that the server should return."
        },
        "referer": {
          "$ref": "https://raw.githubusercontent.com/robcowart/codex/master/schemas/json/uri.json#",
          "title": "Referer",
          "description": "The Referer request header contains the address of the previous web page from which a link to the currently requested page was followed."
        },
        "save_data": {
          "type": "integer",
          "examples": [
            1
          ],
          "title": "Save-Data",
          "description": "The Save-Data header field is a boolean which, in requests, indicates the client's preference for reduced data usage. A numerical value indicating whether the client wants to opt in to reduced data usage mode. on indicates yes, while off (the default) indicates no."
        },
        "sec_fetch_dest": {
          "type": "string",
          "examples": [
            "script"
          ],
          "title": "Sec-Fetch-Dest",
          "description": "The Sec-Fetch-Dest fetch metadata header indicates the request's destination, that is how the fetched data will be used."
        },
        "sec_fetch_mode": {
          "type": "string",
          "examples": [
            "cors",
            "navigate",
            "no-cors",
            "same-origin",
            "websocket"
          ],
          "title": "Sec-Fetch-Mode",
          "description": "The Sec-Fetch-Mode fetch metadata header indicates the request's mode."
        },
        "sec_fetch_site": {
          "type": "string",
          "examples": [
            "cross-site",
            "same-origin",
            "same-site",
            "none"
          ],
          "title": "Sec-Fetch-Site",
          "description": "The Sec-Fetch-Site fetch metadata header indicates the relationship between a request initiator's origin and the origin of the resource."
        },
        "sec_fetch_user": {
          "type": "integer",
          "examples": [
            1
          ],
          "title": "Sec-Fetch-User",
          "description": "The Sec-Fetch-User fetch metadata header indicates whether or not a navigation request was triggered by a user activation."
        },
        "te": {
          "type": "string",
          "examples": [
            "trailers, deflate;q=0.5"
          ],
          "title": "TE",
          "description": "The TE request header specifies the transfer encodings the user agent is willing to accept."
        },
        "upgrade_insecure_requests": {
          "type": "integer",
          "examples": [
            1
          ],
          "title": "Upgrade-Insecure-Requests",
          "description": "The HTTP Upgrade-Insecure-Requests request header sends a signal to the server expressing the client’s preference for an encrypted and authenticated response, and that it can successfully handle the upgrade-insecure-requests CSP directive."
        },
        "user_agent": {
          "$ref": "https://raw.githubusercontent.com/robcowart/codex/master/schemas/json/user_agent.json#",
          "title": "User-Agent",
          "description": "The User-Agent request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent."
        },
        "x_att_deviceid": {
          "type": "string",
          "examples": [
            "LG-LG306G/V100",
            "SAMSUNG-SM-N900A/N900AUCUCNC2"
          ],
          "title": "X-ATT-DeviceId",
          "description": "The X-ATT-DeviceId request header is typically used to identify the make, model, and firmware of AT&T devices."
        },
        "x_authenticated_groups": {
          "type": "string",
          "examples": [
            "TERBUDovLzE5Mi4xNjguMTIuMTAwL289bXljb21wYW55LCBvdT1lbmdpbmVlcmluZw=="
          ],
          "title": "X-Authenticated-Groups",
          "description": "The X-Authenticated-Groups header is a base-64 encoded representation of the groups to which the authenticated user belongs."
        },
        "x_authenticated_user": {
          "type": "string",
          "examples": [
            "TERBUDovLzE5Mi4xNjguMTIuMTAwL289bXljb21wYW55LCBvdT1lbmdpbmVlcmluZw=="
          ],
          "title": "X-Authenticated-User",
          "description": "The X-Authenticated-User header is a base-64 encoded representation of the authenticated user name."
        },
        "x_bluecoat_via": {
          "type": "string",
          "title": "X-Bluecoat-Via",
          "description": "The purpose of the X-Bluecoat-Via header is to detect loops in the network. If the proxy receives a request with the exact same X-Bluecoat-Via header that it generates on the server-side, it knows that the request was generated from itself and it will not be propagated. Each proxy generates a different X-Bluecoat-Via header."
        },
        "x_client_ip": {
          "type": "string",
          "examples": [
            "192.168.1.11"
          ],
          "title": "X-Client-IP",
          "description": "The X-Client-IP header field is the IP source address of the encapsulated HTTP request. The IP address MUST be a dotted-decimal IPv4 address or an IPv6 hex address."
        },
        "x_csrf_token": {
          "type": "string",
          "examples": [
            "i8XNjC4b8KVok4uw5RftR38Wgp2BFwql"
          ],
          "title": "X-Csrf-Token",
          "description": "The X-Csrf-Token request header contains a value previously provided in the server cookie which can be used to prevent CSRF attacks."
        },
        "x_device_id": {
          "type": "string",
          "title": "X-Device-ID",
          "description": "The X-Device-ID header contains an identifier for the device sending the request."
        },
        "x_flash_version": {
          "type": "string",
          "examples": [
            "10,0,32,18"
          ],
          "title": "X-Flash-Version",
          "description": "The X-Flash-Version request header contains the version of Adobe Flash running on the client."
        },
        "x_forwarded_for": {
          "type": "string",
          "examples": [
            "203.0.113.195, 70.41.3.18, 150.172.238.178"
          ],
          "title": "X-Forwarded-For",
          "description": "The X-Forwarded-For (XFF) header is a de-facto standard header for identifying the originating IP address of a client connecting to a web server through an HTTP proxy or a load balancer. When traffic is intercepted between clients and servers, server access logs contain the IP address of the proxy or load balancer only. To see the original IP address of the client, the X-Forwarded-For request header is used."
        },
        "x_forwarded_host": {
          "$ref": "https://raw.githubusercontent.com/robcowart/codex/master/schemas/json/host.json#",
          "examples": [
            "id42.example-cdn.com"
          ],
          "title": "X-Forwarded-Host",
          "description": "The X-Forwarded-Host (XFH) header is a de-facto standard header for identifying the original host requested by the client in the Host HTTP request header."
        },
        "x_forwarded_proto": {
          "type": "string",
          "examples": [
            "https"
          ],
          "title": "X-Forwarded-Proto",
          "description": "The X-Forwarded-Proto (XFP) header is a de-facto standard header for identifying the protocol (HTTP or HTTPS) that a client used to connect to your proxy or load balancer. Your server access logs contain the protocol used between the server and the load balancer, but not the protocol used between the client and the load balancer. To determine the protocol used between the client and the load balancer, the X-Forwarded-Proto request header can be used."
        },
        "x_forwarded_server": {
          "type": "string",
          "title": "X-Forwarded-Server",
          "description": "The X-Forwarded-Server header contains the hostname of the proxy server."
        },
        "x_http_method_override": {
          "type": "string",
          "examples": [
            "PUT",
            "DELETE"
          ],
          "title": "X-HTTP-Method-Override",
          "description": "The X-HTTP-Method-Override header is used to override the HTTP method of the request. It can be used to channel a PUT or DELETE request through a POST request."
        },
        "x_idfa": {
          "type": "string",
          "title": "X-IDFA",
          "description": "The X-IDFA request header contains an Identifier for Advertising (IDFA)."
        },
        "x_idfv": {
          "type": "string",
          "title": "X-IDFV",
          "description": "The X-IDFV request header contains an Identifier for Vendor (IDFV)."
        },
        "x_method_override": {
          "type": "string",
          "examples": [
            "PUT",
            "DELETE"
          ],
          "title": "X-Method-Override",
          "description": "The X-Method-Override header is used to override the HTTP method of the request. It can be used to channel a PUT or DELETE request through a POST request."
        },
        "x_nonce": {
          "type": "string",
          "title": "X-Nonce",
          "description": "The X-Nonce header contains a base64-encoded client nonce."
        },
        "x_organization_id": {
          "type": "string",
          "title": "X-Organization-ID",
          "description": "The X-Organization-ID contains the UUID for an organization."
        },
        "x_profile": {
          "type": "string",
          "title": "X-Profile",
          "description": "The X-Profile request header."
        },
        "x_profile_token": {
          "type": "string",
          "title": "X-Profile-Token",
          "description": "The X-Profile-Token request header."
        },
        "x_request_id": {
          "type": "string",
          "title": "X-Request-ID",
          "description": "The X-Request-ID request header contains an ID sent by a client to the server. Messages from the server may include this value in the X-Correlation-ID of any response which is related to the request."
        },
        "x_requested_with": {
          "type": "string",
          "examples": [
            "XMLHttpRequest"
          ],
          "title": "X-Requested-With",
          "description": "The X-Requested-With request header is typically used to identify Ajax requests."
        },
        "x_server_ip": {
          "type": "string",
          "examples": [
            "10.10.199.199"
          ],
          "title": "X-Server-IP",
          "description": "The X-Server-IP header is the IP destination address of the encapsulated HTTP request. It specifies the HTTP destination host and not the IP address of any intermediate proxy server. The IP address MUST be a dotted-decimal IPv4 address or an IPv6 hex address."
        },
        "x_subscriber_id": {
          "type": "string",
          "title": "X-Subscriber-ID",
          "description": "The X-Subscriber-ID header contains a unique subscriber ID of the user who issued the HTTP request. This MAY be an e-mail address but the exact format of the subscriber ID is not specified by ICAP or this document."
        },
        "x_time": {
          "type": "string",
          "examples": [
            3600
          ],
          "title": "X-Time",
          "description": "The X-Time request header."
        },
        "x_uidh": {
          "type": "string",
          "title": "X-UIDH",
          "description": "The X-UIDH request header contains Verizon's Advertising ID Header."
        },
        "x_user_agent": {
          "$ref": "https://raw.githubusercontent.com/robcowart/codex/master/schemas/json/user_agent.json#",
          "title": "X-User-Agent",
          "description": "The X-User-Agent header is often inserted by some independent messenger between the actual client and the server, like a proxy, load balancer or transcoder, but also some *XMLHttpRequest* based libraries. It often identifies the messenger itself. The User-Agent header should still represent the actual client. You also see this header sometimes in emails, this then represents the email program/software responsible for sending the message."
        },
        "x_wap_profile": {
          "$ref": "https://raw.githubusercontent.com/robcowart/codex/master/schemas/json/uri.json#",
          "examples": [
            "http://www.spreadtrum.com/wap/8810G_UAProfile.xml"
          ],
          "title": "X-Wap-Profile",
          "description": "The X-Wap-Profile request header is typically used to link to an XML file on the Internet with a full description and details about the device currently connecting."
        }
      },
      "additionalProperties": true
    },
    "resp": {
      "type": "object",
      "title": "response",
      "description": "Contains response headers and additional attributes related to an HTTP response.",
      "required": [
        "status"
      ],
      "properties": {
        "datetime": {
          "type": "string",
          "examples": [
            "Wed, 21 Oct 2015 07:28:00 GMT"
          ],
          "title": "date and time",
          "description": "The timestamp, expressed as an HTTP-date value, when the HTTP response was observed."
        },
        "timestamp": {
          "type": "integer",
          "examples": [
            1591974346603
          ],
          "title": "timestamp",
          "description": "The timestamp, expressed as milliseconds since epoch, when the HTTP response was observed."
        },
        "bytes": {
          "type": "integer",
          "examples": [
            768
          ],
          "title": "response size/length",
          "description": "The size/length of the HTTP request."
        },
        "status": {
          "type": "string",
          "examples": [
            "200",
            "404"
          ],
          "title": "status code",
          "description": "HTTP response status codes indicate whether a specific HTTP request has been successfully completed."
        },
        "reason_phrase": {
          "type": "string",
          "examples": [
            "OK",
            "Not Found"
          ],
          "title": "Reason-Phrase",
          "description": "The Reason-Phrase is intended to give a short textual description of the Status-Code."
        },
        "server": {
          "$ref": "https://raw.githubusercontent.com/robcowart/codex/master/schemas/json/user_agent.json#",
          "title": "Server",
          "description": "The Server header describes the software used by the origin server that handled the request, that is, the server that generated the response. The name of the software or product that handled the request. Usually in a format similar to User-Agent."
        }
      },
      "additionalProperties": true
    }
  },
  "additionalProperties": true
}
